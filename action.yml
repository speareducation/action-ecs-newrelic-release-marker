name: NewRelic ECS Release Markers
description: Reads a Task Definition and sends a release marker to NewRelic

inputs:
  newrelic-api-key:
    description: NewRelic API Key
    required: true
  release: 
    description: The release tag
    required: true
  task-definition:
    description: The Task Definition file
    required: true

runs:
  using: 'composite'
  steps:
    - name: Setup Dependencies
      shell: bash
      run: |
        appsToInstall=()
        command -v jq || appsToInstall+=("jq")
        command -v curl || appsToInstall+=("curl")
        if [[ ${#appsToInstall[@]} -gt 0 ]]; then
          apt-get update && apt-get install -y ${appsToInstall[@]}
        fi

    - name: Read Task Definition
      id: taskdef
      shell: bash
      run: |
        envJson="$(jq -rc '.containerDefinitions[0].environment[]' ${{ inputs.task-definition }})"
        enabled=$(echo "$envJson" | jq -r 'select(.name == "NEWRELIC_ENABLE" or .name == "NEW_RELIC_ENABLED").value')
        [[ "$enabled" != "1" ]] && exit 0
        echo "enabled=$enabled" >> ${GITHUB_OUTPUT}
        appName="$(echo "$envJson" | jq -r 'select(.name == "NEWRELIC_APP_NAME" or .name == "NEW_RELIC_APP_NAME").value')"
        echo "appName=$appName" >> ${GITHUB_OUTPUT}
        appId=$(test -n "$appName" && curl -s 'https://api.newrelic.com/v2/applications.json' -H "X-Api-Key:${{ inputs.newrelic-api-key }}" -d "filter[name]=${appName}" | jq -r '.applications[0].id')
        echo "appId=$appId" >> ${GITHUB_OUTPUT}

    - name: Post Marker
      if: steps.taskdef.outputs.enabled == '1'
      shell: bash
      run: |
        postdata='{ "deployment": { "revision": "${{ inputs.release }}" } }'
        apiUrl='https://api.newrelic.com/v2/applications/${{ steps.taskdef.outputs.appId }}/deployments.json'
        curl -X POST  -d "$postdata" -H 'Content-Type: application/json' -H 'X-Api-Key:${{ inputs.newrelic-api-key }}' "$apiUrl"
